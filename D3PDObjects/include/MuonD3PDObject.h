// Dear emacs, this is -*- c++ -*-
// -------------------------------------------------------------
//             Code produced by D3PDMakerReader
//
//  author: Attila Krasznahorkay <Attila.Krasznahorkay@cern.ch>
// -------------------------------------------------------------
#ifndef D3PDREADER_MuonD3PDObject_H
#define D3PDREADER_MuonD3PDObject_H

#include <map>
#include <vector>
using std::vector;

#include <TObject.h>
#include <TString.h>

#include "VarHandle.h"
#include "VarProxy.h"

class TTree;

namespace D3PDReader {

   // Forward declaration(s):
   class MuonD3PDObject;

   /**
    * Code generated by CodeGenerator_v2 on:
    *  host = pc-penn-d-07
    *  OS   = Linux / 2.6.18-274.18.1.el5
    *  user = bjackson
    */
   class MuonD3PDObjectElement : public TObject {

      friend class MuonD3PDObject;

   protected:
      /// Constructor only visible to MuonD3PDObject
      MuonD3PDObjectElement( size_t index, const MuonD3PDObject& parent, bool is_data = true );

   public:
      /// Copy constructor
      MuonD3PDObjectElement( const MuonD3PDObjectElement& parent, bool is_data = true );

      VarProxy< float > E;
      VarProxy< float > pt;
      VarProxy< float > m;
      VarProxy< float > eta;
      VarProxy< float > phi;
      VarProxy< float > px;
      VarProxy< float > py;
      VarProxy< float > pz;
      VarProxy< float > charge;
      VarProxy< float > etcone20;
      VarProxy< float > etcone30;
      VarProxy< float > etcone40;
      VarProxy< float > ptcone20;
      VarProxy< float > ptcone30;
      VarProxy< float > ptcone40;
      /// Muon identified by combining an ID and a MS track.
      VarProxy< int > isCombinedMuon;
      /// Muon identified by inner-detector seeded identification (segment tagging or ID+MS refit).
      VarProxy< int > isSegmentTaggedMuon;
      /// Passes loose quality cuts.
      VarProxy< int > loose;
      VarProxy< float > d0_exPV;
      VarProxy< float > z0_exPV;
      VarProxy< float > qoverp_exPV;
      VarProxy< float > id_theta_exPV;
      VarProxy< float > id_qoverp_exPV;
      VarProxy< float > me_theta_exPV;
      VarProxy< float > me_qoverp_exPV;
      VarProxy< float > cov_d0_exPV;
      VarProxy< float > cov_qoverp_exPV;
      VarProxy< float > cov_z0_qoverp_exPV;
      VarProxy< float > me_cov_qoverp_exPV;
      VarProxy< float > ms_phi;
      VarProxy< float > ms_theta;
      VarProxy< float > ms_qoverp;
      VarProxy< float > id_theta;
      VarProxy< int > nBLHits;
      VarProxy< int > nPixHits;
      VarProxy< int > nSCTHits;
      VarProxy< int > nTRTHits;
      VarProxy< int > nPixHoles;
      VarProxy< int > nSCTHoles;
      VarProxy< int > nTRTOutliers;
      VarProxy< int > nTRTHighTOutliers;
      VarProxy< int > nPixelDeadSensors;
      VarProxy< int > nSCTDeadSensors;
      VarProxy< int > expectBLayerHit;
      VarProxy< int > nMDTHits;
      VarProxy< int > nCSCEtaHits;
      VarProxy< int > nMDTBIHits;
      VarProxy< int > nMDTBMHits;
      VarProxy< int > nMDTBOHits;
      VarProxy< int > nMDTEIHits;
      VarProxy< int > nMDTEMHits;
      VarProxy< int > nMDTEOHits;
      VarProxy< int > nMDTEEHits;
      VarProxy< float > trackIPEstimate_d0_unbiasedpvunbiased;
      VarProxy< float > trackIPEstimate_z0_unbiasedpvunbiased;
      VarProxy< float > trackIPEstimate_sigd0_unbiasedpvunbiased;
// MC only
      /// MC particle type, from classifier tool
      VarProxy< int > type;
      VarProxy< float > truth_dr;
      VarProxy< float > truth_E;
      VarProxy< float > truth_pt;
      VarProxy< float > truth_eta;
      VarProxy< float > truth_phi;
      VarProxy< int > truth_type;
      VarProxy< int > truth_status;
      VarProxy< int > truth_barcode;
      VarProxy< int > truth_mothertype;
      VarProxy< int > truth_motherbarcode;
      VarProxy< int > truth_matched;
// end MC only
      /// Tracking isolation parameter for cone size 0.2
      VarProxy< float > ptcone20_trkelstyle;
      /// Tracking isolation parameter for cone size 0.3
      VarProxy< float > ptcone30_trkelstyle;
      /// Tracking isolation parameter for cone size 0.4
      VarProxy< float > ptcone40_trkelstyle;
      VarProxy< vector<float> > MET_Egamma10NoTau_wpx;
      VarProxy< vector<float> > MET_Egamma10NoTau_wpy;
      VarProxy< vector<float> > MET_Egamma10NoTau_wet;
      VarProxy< vector<unsigned int> > MET_Egamma10NoTau_statusWord;


bool is_data; // ~bj 

      ClassDef( MuonD3PDObjectElement, 0 )

   }; // class MuonD3PDObjectElement

   /**
    * Code generated by CodeGenerator_v2 on:
    *  host = pc-penn-d-07
    *  OS   = Linux / 2.6.18-274.18.1.el5
    *  user = bjackson
    */
   class MuonD3PDObject : public TObject {

   public:
      /// Constructor used when reading from a TTree
      MuonD3PDObject( const ::Long64_t& master, const char* prefix = "mu_staco_", bool is_data = true );
      /// Constructor when the object is only used for writing data out
      MuonD3PDObject( const char* prefix = "mu_staco_", bool is_data = true );

      /// Get the currently configured prefix value
      const char* GetPrefix() const;
      /// Set the prefix for the variables
      void SetPrefix( const char* prefix );

      /// Connect the object to an input TTree
      void ReadFrom( ::TTree* tree );
      /// Connect the object to an output TTree
      void WriteTo( ::TTree* tree );

      /// Turn (selected) branches either on or off
      void SetActive( ::Bool_t active = kTRUE,
                      const ::TString& pattern = ".*" );
      /// Read in all the variables that we need to write out as well
      void ReadAllActive();

      /// Clear the container. Useful when writing new branches.
      void Clear( Option_t* option = "" );
      /// Add one element to an output collection
      MuonD3PDObject& Add( const MuonD3PDObjectElement& el );

      /// Access a proxy class describing one element of the container
      MuonD3PDObjectElement& operator[]( size_t index );
      /// Access a proxy class describing one element of the container (constant version)
      const MuonD3PDObjectElement& operator[]( size_t index ) const;
      /// Add one element to an output collection
      MuonD3PDObject& operator+=( const MuonD3PDObjectElement& el );

      /// Number of ntuple rows.
      VarHandle< Int_t > n;
      VarHandle< vector<float>* > E;
      VarHandle< vector<float>* > pt;
      VarHandle< vector<float>* > m;
      VarHandle< vector<float>* > eta;
      VarHandle< vector<float>* > phi;
      VarHandle< vector<float>* > px;
      VarHandle< vector<float>* > py;
      VarHandle< vector<float>* > pz;
      VarHandle< vector<float>* > charge;
      VarHandle< vector<float>* > etcone20;
      VarHandle< vector<float>* > etcone30;
      VarHandle< vector<float>* > etcone40;
      VarHandle< vector<float>* > ptcone20;
      VarHandle< vector<float>* > ptcone30;
      VarHandle< vector<float>* > ptcone40;
      /// Muon identified by combining an ID and a MS track.
      VarHandle< vector<int>* > isCombinedMuon;
      /// Muon identified by inner-detector seeded identification (segment tagging or ID+MS refit).
      VarHandle< vector<int>* > isSegmentTaggedMuon;
      /// Passes loose quality cuts.
      VarHandle< vector<int>* > loose;
      VarHandle< vector<float>* > d0_exPV;
      VarHandle< vector<float>* > z0_exPV;
      VarHandle< vector<float>* > qoverp_exPV;
      VarHandle< vector<float>* > id_theta_exPV;
      VarHandle< vector<float>* > id_qoverp_exPV;
      VarHandle< vector<float>* > me_theta_exPV;
      VarHandle< vector<float>* > me_qoverp_exPV;
      VarHandle< vector<float>* > cov_d0_exPV;
      VarHandle< vector<float>* > cov_qoverp_exPV;
      VarHandle< vector<float>* > cov_z0_qoverp_exPV;
      VarHandle< vector<float>* > me_cov_qoverp_exPV;
      VarHandle< vector<float>* > ms_phi;
      VarHandle< vector<float>* > ms_theta;
      VarHandle< vector<float>* > ms_qoverp;
      VarHandle< vector<float>* > id_theta;
      VarHandle< vector<int>* > nBLHits;
      VarHandle< vector<int>* > nPixHits;
      VarHandle< vector<int>* > nSCTHits;
      VarHandle< vector<int>* > nTRTHits;
      VarHandle< vector<int>* > nPixHoles;
      VarHandle< vector<int>* > nSCTHoles;
      VarHandle< vector<int>* > nTRTOutliers;
      VarHandle< vector<int>* > nTRTHighTOutliers;
      VarHandle< vector<int>* > nPixelDeadSensors;
      VarHandle< vector<int>* > nSCTDeadSensors;
      VarHandle< vector<int>* > expectBLayerHit;
      VarHandle< vector<int>* > nMDTHits;
      VarHandle< vector<int>* > nCSCEtaHits;
      VarHandle< vector<int>* > nMDTBIHits;
      VarHandle< vector<int>* > nMDTBMHits;
      VarHandle< vector<int>* > nMDTBOHits;
      VarHandle< vector<int>* > nMDTEIHits;
      VarHandle< vector<int>* > nMDTEMHits;
      VarHandle< vector<int>* > nMDTEOHits;
      VarHandle< vector<int>* > nMDTEEHits;
      VarHandle< vector<float>* > trackIPEstimate_d0_unbiasedpvunbiased;
      VarHandle< vector<float>* > trackIPEstimate_z0_unbiasedpvunbiased;
      VarHandle< vector<float>* > trackIPEstimate_sigd0_unbiasedpvunbiased;
// MC only
      /// MC particle type, from classifier tool
      VarHandle< vector<int>* > type;
      VarHandle< vector<float>* > truth_dr;
      VarHandle< vector<float>* > truth_E;
      VarHandle< vector<float>* > truth_pt;
      VarHandle< vector<float>* > truth_eta;
      VarHandle< vector<float>* > truth_phi;
      VarHandle< vector<int>* > truth_type;
      VarHandle< vector<int>* > truth_status;
      VarHandle< vector<int>* > truth_barcode;
      VarHandle< vector<int>* > truth_mothertype;
      VarHandle< vector<int>* > truth_motherbarcode;
      VarHandle< vector<int>* > truth_matched;
// end MC only
      /// Tracking isolation parameter for cone size 0.2
      VarHandle< vector<float>* > ptcone20_trkelstyle;
      /// Tracking isolation parameter for cone size 0.3
      VarHandle< vector<float>* > ptcone30_trkelstyle;
      /// Tracking isolation parameter for cone size 0.4
      VarHandle< vector<float>* > ptcone40_trkelstyle;
      VarHandle< vector<vector<float> >* > MET_Egamma10NoTau_wpx;
      VarHandle< vector<vector<float> >* > MET_Egamma10NoTau_wpy;
      VarHandle< vector<vector<float> >* > MET_Egamma10NoTau_wet;
      VarHandle< vector<vector<unsigned int> >* > MET_Egamma10NoTau_statusWord;

   private:
      mutable std::vector< MuonD3PDObjectElement > fProxies; ///< Internal list of proxy objects
      std::map< ::TString, VarHandleBase* > fHandles; ///< Book-keeper of the VarHandle members
      const ::Bool_t fFromInput; ///< Flag specifying if object is used for D3PD reading
      const ::TString fPrefix; ///< Prefix to the branch names


bool is_data; // ~bj 

      ClassDef( MuonD3PDObject, 0 )

   }; // class MuonD3PDObject

} // namespace D3PDReader

#endif // D3PDREADER_MuonD3PDObject_H
