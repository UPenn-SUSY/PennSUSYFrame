// Dear emacs, this is -*- c++ -*-
// -------------------------------------------------------------
//             Code produced by D3PDMakerReader
//
//  author: Attila Krasznahorkay <Attila.Krasznahorkay@cern.ch>
// -------------------------------------------------------------
#ifndef D3PDREADER_MuonD3PDObject_H
#define D3PDREADER_MuonD3PDObject_H

#include <map>
#include <vector>
using std::vector;

#include <TObject.h>
#include <TString.h>

#include "VarHandle.h"
#include "VarProxy.h"

class TTree;

namespace D3PDReader {

   // Forward declaration(s):
   class MuonD3PDObject;

   /**
    * Code generated by CodeGenerator_v2 on:
    *  host = pc-penn-d-07
    *  OS   = Linux / 2.6.18-274.18.1.el5
    *  user = bjackson
    */
   class MuonD3PDObjectElement : public TObject {

      friend class MuonD3PDObject;

   protected:
      /// Constructor only visible to MuonD3PDObject
      MuonD3PDObjectElement( size_t index, const MuonD3PDObject& parent, bool is_data = true );

   public:
      /// Copy constructor
      MuonD3PDObjectElement( const MuonD3PDObjectElement& parent, bool is_data = true );

      VarProxy< float > E;
      VarProxy< float > pt;
      VarProxy< float > m;
      VarProxy< float > eta;
      VarProxy< float > phi;
      VarProxy< float > px;
      VarProxy< float > py;
      VarProxy< float > pz;
      VarProxy< float > charge;
      VarProxy< unsigned short > allauthor;
      VarProxy< int > author;
      VarProxy< float > matchchi2;
      VarProxy< int > matchndof;
      VarProxy< float > etcone20;
      VarProxy< float > etcone30;
      VarProxy< float > etcone40;
      VarProxy< float > nucone20;
      VarProxy< float > nucone30;
      VarProxy< float > nucone40;
      VarProxy< float > ptcone20;
      VarProxy< float > ptcone30;
      VarProxy< float > ptcone40;
      VarProxy< float > etconeNoEm10;
      VarProxy< float > etconeNoEm20;
      VarProxy< float > etconeNoEm30;
      VarProxy< float > etconeNoEm40;
      VarProxy< float > scatteringCurvatureSignificance;
      VarProxy< float > scatteringNeighbourSignificance;
      VarProxy< float > momentumBalanceSignificance;
      VarProxy< float > energyLossPar;
      VarProxy< float > energyLossErr;
      VarProxy< float > etCore;
      VarProxy< float > energyLossType;
      VarProxy< unsigned short > caloMuonIdTag;
      VarProxy< double > caloLRLikelihood;
      /// Is this combined track the best match to a MS track?
      VarProxy< int > bestMatch;
      /// Muon identified by a spectrometer track (not associated to ID).
      VarProxy< int > isStandAloneMuon;
      /// Muon identified by combining an ID and a MS track.
      VarProxy< int > isCombinedMuon;
      /// Low-pt reconstructed muon (deprecated).
      VarProxy< int > isLowPtReconstructedMuon;
      /// Muon identified by inner-detector seeded identification (segment tagging or ID+MS refit).
      VarProxy< int > isSegmentTaggedMuon;
      /// Muon identified solely from calorimeter information (so no signal in MS).
      VarProxy< int > isCaloMuonId;
      /// Is this muon also reconstructed by the lowPt algorithm?
      VarProxy< int > alsoFoundByLowPt;
      /// Is this muon also reconstructed by a CaloMuon ID algorithm?
      VarProxy< int > alsoFoundByCaloMuonId;
      /// Is this muon also with a clean forward standalone muon associated to a ID tracklet
      VarProxy< int > isSiliconAssociatedForwardMuon;
      /// Passes loose quality cuts.
      VarProxy< int > loose;
      /// Passes medium quality cuts.
      VarProxy< int > medium;
      /// Passes tight quality cuts.
      VarProxy< int > tight;
      VarProxy< float > d0_exPV;
      VarProxy< float > z0_exPV;
      VarProxy< float > phi_exPV;
      VarProxy< float > theta_exPV;
      VarProxy< float > qoverp_exPV;
      VarProxy< float > cb_d0_exPV;
      VarProxy< float > cb_z0_exPV;
      VarProxy< float > cb_phi_exPV;
      VarProxy< float > cb_theta_exPV;
      VarProxy< float > cb_qoverp_exPV;
      VarProxy< float > id_d0_exPV;
      VarProxy< float > id_z0_exPV;
      VarProxy< float > id_phi_exPV;
      VarProxy< float > id_theta_exPV;
      VarProxy< float > id_qoverp_exPV;
      VarProxy< float > me_d0_exPV;
      VarProxy< float > me_z0_exPV;
      VarProxy< float > me_phi_exPV;
      VarProxy< float > me_theta_exPV;
      VarProxy< float > me_qoverp_exPV;
      VarProxy< float > ie_d0_exPV;
      VarProxy< float > ie_z0_exPV;
      VarProxy< float > ie_phi_exPV;
      VarProxy< float > ie_theta_exPV;
      VarProxy< float > ie_qoverp_exPV;
      VarProxy< float > cov_d0_exPV;
      VarProxy< float > cov_z0_exPV;
      VarProxy< float > cov_phi_exPV;
      VarProxy< float > cov_theta_exPV;
      VarProxy< float > cov_qoverp_exPV;
      VarProxy< float > cov_d0_z0_exPV;
      VarProxy< float > cov_d0_phi_exPV;
      VarProxy< float > cov_d0_theta_exPV;
      VarProxy< float > cov_d0_qoverp_exPV;
      VarProxy< float > cov_z0_phi_exPV;
      VarProxy< float > cov_z0_theta_exPV;
      VarProxy< float > cov_z0_qoverp_exPV;
      VarProxy< float > cov_phi_theta_exPV;
      VarProxy< float > cov_phi_qoverp_exPV;
      VarProxy< float > cov_theta_qoverp_exPV;
      VarProxy< float > id_cov_d0_exPV;
      VarProxy< float > id_cov_z0_exPV;
      VarProxy< float > id_cov_phi_exPV;
      VarProxy< float > id_cov_theta_exPV;
      VarProxy< float > id_cov_qoverp_exPV;
      VarProxy< float > id_cov_d0_z0_exPV;
      VarProxy< float > id_cov_d0_phi_exPV;
      VarProxy< float > id_cov_d0_theta_exPV;
      VarProxy< float > id_cov_d0_qoverp_exPV;
      VarProxy< float > id_cov_z0_phi_exPV;
      VarProxy< float > id_cov_z0_theta_exPV;
      VarProxy< float > id_cov_z0_qoverp_exPV;
      VarProxy< float > id_cov_phi_theta_exPV;
      VarProxy< float > id_cov_phi_qoverp_exPV;
      VarProxy< float > id_cov_theta_qoverp_exPV;
      VarProxy< float > me_cov_d0_exPV;
      VarProxy< float > me_cov_z0_exPV;
      VarProxy< float > me_cov_phi_exPV;
      VarProxy< float > me_cov_theta_exPV;
      VarProxy< float > me_cov_qoverp_exPV;
      VarProxy< float > ms_d0;
      VarProxy< float > ms_z0;
      VarProxy< float > ms_phi;
      VarProxy< float > ms_theta;
      VarProxy< float > ms_qoverp;
      VarProxy< float > id_d0;
      VarProxy< float > id_z0;
      VarProxy< float > id_phi;
      VarProxy< float > id_theta;
      VarProxy< float > id_qoverp;
      VarProxy< float > me_d0;
      VarProxy< float > me_z0;
      VarProxy< float > me_phi;
      VarProxy< float > me_theta;
      VarProxy< float > me_qoverp;
      VarProxy< float > ie_d0;
      VarProxy< float > ie_z0;
      VarProxy< float > ie_phi;
      VarProxy< float > ie_theta;
      VarProxy< float > ie_qoverp;
      VarProxy< int > nOutliersOnTrack;
      VarProxy< int > nBLHits;
      VarProxy< int > nPixHits;
      VarProxy< int > nSCTHits;
      VarProxy< int > nTRTHits;
      VarProxy< int > nTRTHighTHits;
      VarProxy< int > nBLSharedHits;
      VarProxy< int > nPixSharedHits;
      VarProxy< int > nPixHoles;
      VarProxy< int > nSCTSharedHits;
      VarProxy< int > nSCTHoles;
      VarProxy< int > nTRTOutliers;
      VarProxy< int > nTRTHighTOutliers;
      VarProxy< int > nGangedPixels;
      VarProxy< int > nPixelDeadSensors;
      VarProxy< int > nSCTDeadSensors;
      VarProxy< int > nTRTDeadStraws;
      VarProxy< int > expectBLayerHit;
      VarProxy< int > nMDTHits;
      VarProxy< int > nMDTHoles;
      VarProxy< int > nCSCEtaHits;
      VarProxy< int > nCSCEtaHoles;
      VarProxy< int > nCSCUnspoiledEtaHits;
      VarProxy< int > nCSCPhiHits;
      VarProxy< int > nCSCPhiHoles;
      VarProxy< int > nRPCEtaHits;
      VarProxy< int > nRPCEtaHoles;
      VarProxy< int > nRPCPhiHits;
      VarProxy< int > nRPCPhiHoles;
      VarProxy< int > nTGCEtaHits;
      VarProxy< int > nTGCEtaHoles;
      VarProxy< int > nTGCPhiHits;
      VarProxy< int > nTGCPhiHoles;
      VarProxy< int > nprecisionLayers;
      VarProxy< int > nprecisionHoleLayers;
      VarProxy< int > nphiLayers;
      VarProxy< int > ntrigEtaLayers;
      VarProxy< int > nphiHoleLayers;
      VarProxy< int > ntrigEtaHoleLayers;
      VarProxy< int > nMDTBIHits;
      VarProxy< int > nMDTBMHits;
      VarProxy< int > nMDTBOHits;
      VarProxy< int > nMDTBEEHits;
      VarProxy< int > nMDTBIS78Hits;
      VarProxy< int > nMDTEIHits;
      VarProxy< int > nMDTEMHits;
      VarProxy< int > nMDTEOHits;
      VarProxy< int > nMDTEEHits;
      VarProxy< int > nRPCLayer1EtaHits;
      VarProxy< int > nRPCLayer2EtaHits;
      VarProxy< int > nRPCLayer3EtaHits;
      VarProxy< int > nRPCLayer1PhiHits;
      VarProxy< int > nRPCLayer2PhiHits;
      VarProxy< int > nRPCLayer3PhiHits;
      VarProxy< int > nTGCLayer1EtaHits;
      VarProxy< int > nTGCLayer2EtaHits;
      VarProxy< int > nTGCLayer3EtaHits;
      VarProxy< int > nTGCLayer4EtaHits;
      VarProxy< int > nTGCLayer1PhiHits;
      VarProxy< int > nTGCLayer2PhiHits;
      VarProxy< int > nTGCLayer3PhiHits;
      VarProxy< int > nTGCLayer4PhiHits;
      VarProxy< int > barrelSectors;
      VarProxy< int > endcapSectors;
      VarProxy< float > trackd0;
      VarProxy< float > trackz0;
      VarProxy< float > trackphi;
      VarProxy< float > tracktheta;
      VarProxy< float > trackqoverp;
      VarProxy< float > trackcov_d0;
      VarProxy< float > trackcov_z0;
      VarProxy< float > trackcov_phi;
      VarProxy< float > trackcov_theta;
      VarProxy< float > trackcov_qoverp;
      VarProxy< float > trackcov_d0_z0;
      VarProxy< float > trackcov_d0_phi;
      VarProxy< float > trackcov_d0_theta;
      VarProxy< float > trackcov_d0_qoverp;
      VarProxy< float > trackcov_z0_phi;
      VarProxy< float > trackcov_z0_theta;
      VarProxy< float > trackcov_z0_qoverp;
      VarProxy< float > trackcov_phi_theta;
      VarProxy< float > trackcov_phi_qoverp;
      VarProxy< float > trackcov_theta_qoverp;
      VarProxy< int > hastrack;
      VarProxy< float > trackIPEstimate_d0_biasedpvunbiased;
      VarProxy< float > trackIPEstimate_z0_biasedpvunbiased;
      VarProxy< float > trackIPEstimate_sigd0_biasedpvunbiased;
      VarProxy< float > trackIPEstimate_sigz0_biasedpvunbiased;
      VarProxy< float > trackIPEstimate_d0_unbiasedpvunbiased;
      VarProxy< float > trackIPEstimate_z0_unbiasedpvunbiased;
      VarProxy< float > trackIPEstimate_sigd0_unbiasedpvunbiased;
      VarProxy< float > trackIPEstimate_sigz0_unbiasedpvunbiased;
// MC only
      /// MC particle type, from classifier tool
      VarProxy< int > type;
      /// MC particle origin, from classifier tool
      VarProxy< int > origin;
      VarProxy< float > truth_dr;
      VarProxy< float > truth_E;
      VarProxy< float > truth_pt;
      VarProxy< float > truth_eta;
      VarProxy< float > truth_phi;
      VarProxy< int > truth_type;
      VarProxy< int > truth_status;
      VarProxy< int > truth_barcode;
      VarProxy< int > truth_mothertype;
      VarProxy< int > truth_motherbarcode;
      VarProxy< int > truth_matched;
// end MC only
      /// Index in trig_EF_trigmuonef_
      VarProxy< int > EFCB_index;
      /// Index in trig_EF_trigmugirl_
      VarProxy< int > EFMG_index;
      /// Index in trig_EF_trigmuonef_
      VarProxy< int > EFME_index;
      VarProxy< float > ptcone20_trk500MeV;
      VarProxy< float > ptcone30_trk500MeV;
      VarProxy< float > ptcone40_trk500MeV;
      VarProxy< int > nucone20_trk500MeV;
      VarProxy< int > nucone30_trk500MeV;
      VarProxy< int > nucone40_trk500MeV;
      VarProxy< float > ptcone20_trkelstyle;
      VarProxy< float > ptcone30_trkelstyle;
      VarProxy< float > ptcone40_trkelstyle;
      VarProxy< int > nucone20_trkelstyle;
      VarProxy< int > nucone30_trkelstyle;
      VarProxy< int > nucone40_trkelstyle;
      VarProxy< vector<float> > MET_Egamma10NoTau_wpx;
      VarProxy< vector<float> > MET_Egamma10NoTau_wpy;
      VarProxy< vector<float> > MET_Egamma10NoTau_wet;
      VarProxy< vector<unsigned int> > MET_Egamma10NoTau_statusWord;
      VarProxy< vector<float> > MET_LooseEgamma10NoTau_wpx;
      VarProxy< vector<float> > MET_LooseEgamma10NoTau_wpy;
      VarProxy< vector<float> > MET_LooseEgamma10NoTau_wet;
      VarProxy< vector<unsigned int> > MET_LooseEgamma10NoTau_statusWord;
      VarProxy< vector<float> > MET_Egamma10LooseTau_wpx;
      VarProxy< vector<float> > MET_Egamma10LooseTau_wpy;
      VarProxy< vector<float> > MET_Egamma10LooseTau_wet;
      VarProxy< vector<unsigned int> > MET_Egamma10LooseTau_statusWord;
      VarProxy< vector<float> > MET_wpx;
      VarProxy< vector<float> > MET_wpy;
      VarProxy< vector<float> > MET_wet;
      VarProxy< vector<unsigned int> > MET_statusWord;


bool is_data; // ~bj 

      ClassDef( MuonD3PDObjectElement, 0 )

   }; // class MuonD3PDObjectElement

   /**
    * Code generated by CodeGenerator_v2 on:
    *  host = pc-penn-d-07
    *  OS   = Linux / 2.6.18-274.18.1.el5
    *  user = bjackson
    */
   class MuonD3PDObject : public TObject {

   public:
      /// Constructor used when reading from a TTree
      MuonD3PDObject( const ::Long64_t& master, const char* prefix = "mu_staco_", bool is_data = true );
      /// Constructor when the object is only used for writing data out
      MuonD3PDObject( const char* prefix = "mu_staco_", bool is_data = true );

      /// Get the currently configured prefix value
      const char* GetPrefix() const;
      /// Set the prefix for the variables
      void SetPrefix( const char* prefix );

      /// Connect the object to an input TTree
      void ReadFrom( ::TTree* tree );
      /// Connect the object to an output TTree
      void WriteTo( ::TTree* tree );

      /// Turn (selected) branches either on or off
      void SetActive( ::Bool_t active = kTRUE,
                      const ::TString& pattern = ".*" );
      /// Read in all the variables that we need to write out as well
      void ReadAllActive();

      /// Clear the container. Useful when writing new branches.
      void Clear( Option_t* option = "" );
      /// Add one element to an output collection
      MuonD3PDObject& Add( const MuonD3PDObjectElement& el );

      /// Access a proxy class describing one element of the container
      MuonD3PDObjectElement& operator[]( size_t index );
      /// Access a proxy class describing one element of the container (constant version)
      const MuonD3PDObjectElement& operator[]( size_t index ) const;
      /// Add one element to an output collection
      MuonD3PDObject& operator+=( const MuonD3PDObjectElement& el );

      /// Number of ntuple rows.
      VarHandle< Int_t > n;
      VarHandle< vector<float>* > E;
      VarHandle< vector<float>* > pt;
      VarHandle< vector<float>* > m;
      VarHandle< vector<float>* > eta;
      VarHandle< vector<float>* > phi;
      VarHandle< vector<float>* > px;
      VarHandle< vector<float>* > py;
      VarHandle< vector<float>* > pz;
      VarHandle< vector<float>* > charge;
      VarHandle< vector<unsigned short>* > allauthor;
      VarHandle< vector<int>* > author;
      VarHandle< vector<float>* > matchchi2;
      VarHandle< vector<int>* > matchndof;
      VarHandle< vector<float>* > etcone20;
      VarHandle< vector<float>* > etcone30;
      VarHandle< vector<float>* > etcone40;
      VarHandle< vector<float>* > nucone20;
      VarHandle< vector<float>* > nucone30;
      VarHandle< vector<float>* > nucone40;
      VarHandle< vector<float>* > ptcone20;
      VarHandle< vector<float>* > ptcone30;
      VarHandle< vector<float>* > ptcone40;
      VarHandle< vector<float>* > etconeNoEm10;
      VarHandle< vector<float>* > etconeNoEm20;
      VarHandle< vector<float>* > etconeNoEm30;
      VarHandle< vector<float>* > etconeNoEm40;
      VarHandle< vector<float>* > scatteringCurvatureSignificance;
      VarHandle< vector<float>* > scatteringNeighbourSignificance;
      VarHandle< vector<float>* > momentumBalanceSignificance;
      VarHandle< vector<float>* > energyLossPar;
      VarHandle< vector<float>* > energyLossErr;
      VarHandle< vector<float>* > etCore;
      VarHandle< vector<float>* > energyLossType;
      VarHandle< vector<unsigned short>* > caloMuonIdTag;
      VarHandle< vector<double>* > caloLRLikelihood;
      /// Is this combined track the best match to a MS track?
      VarHandle< vector<int>* > bestMatch;
      /// Muon identified by a spectrometer track (not associated to ID).
      VarHandle< vector<int>* > isStandAloneMuon;
      /// Muon identified by combining an ID and a MS track.
      VarHandle< vector<int>* > isCombinedMuon;
      /// Low-pt reconstructed muon (deprecated).
      VarHandle< vector<int>* > isLowPtReconstructedMuon;
      /// Muon identified by inner-detector seeded identification (segment tagging or ID+MS refit).
      VarHandle< vector<int>* > isSegmentTaggedMuon;
      /// Muon identified solely from calorimeter information (so no signal in MS).
      VarHandle< vector<int>* > isCaloMuonId;
      /// Is this muon also reconstructed by the lowPt algorithm?
      VarHandle< vector<int>* > alsoFoundByLowPt;
      /// Is this muon also reconstructed by a CaloMuon ID algorithm?
      VarHandle< vector<int>* > alsoFoundByCaloMuonId;
      /// Is this muon also with a clean forward standalone muon associated to a ID tracklet
      VarHandle< vector<int>* > isSiliconAssociatedForwardMuon;
      /// Passes loose quality cuts.
      VarHandle< vector<int>* > loose;
      /// Passes medium quality cuts.
      VarHandle< vector<int>* > medium;
      /// Passes tight quality cuts.
      VarHandle< vector<int>* > tight;
      VarHandle< vector<float>* > d0_exPV;
      VarHandle< vector<float>* > z0_exPV;
      VarHandle< vector<float>* > phi_exPV;
      VarHandle< vector<float>* > theta_exPV;
      VarHandle< vector<float>* > qoverp_exPV;
      VarHandle< vector<float>* > cb_d0_exPV;
      VarHandle< vector<float>* > cb_z0_exPV;
      VarHandle< vector<float>* > cb_phi_exPV;
      VarHandle< vector<float>* > cb_theta_exPV;
      VarHandle< vector<float>* > cb_qoverp_exPV;
      VarHandle< vector<float>* > id_d0_exPV;
      VarHandle< vector<float>* > id_z0_exPV;
      VarHandle< vector<float>* > id_phi_exPV;
      VarHandle< vector<float>* > id_theta_exPV;
      VarHandle< vector<float>* > id_qoverp_exPV;
      VarHandle< vector<float>* > me_d0_exPV;
      VarHandle< vector<float>* > me_z0_exPV;
      VarHandle< vector<float>* > me_phi_exPV;
      VarHandle< vector<float>* > me_theta_exPV;
      VarHandle< vector<float>* > me_qoverp_exPV;
      VarHandle< vector<float>* > ie_d0_exPV;
      VarHandle< vector<float>* > ie_z0_exPV;
      VarHandle< vector<float>* > ie_phi_exPV;
      VarHandle< vector<float>* > ie_theta_exPV;
      VarHandle< vector<float>* > ie_qoverp_exPV;
      VarHandle< vector<float>* > cov_d0_exPV;
      VarHandle< vector<float>* > cov_z0_exPV;
      VarHandle< vector<float>* > cov_phi_exPV;
      VarHandle< vector<float>* > cov_theta_exPV;
      VarHandle< vector<float>* > cov_qoverp_exPV;
      VarHandle< vector<float>* > cov_d0_z0_exPV;
      VarHandle< vector<float>* > cov_d0_phi_exPV;
      VarHandle< vector<float>* > cov_d0_theta_exPV;
      VarHandle< vector<float>* > cov_d0_qoverp_exPV;
      VarHandle< vector<float>* > cov_z0_phi_exPV;
      VarHandle< vector<float>* > cov_z0_theta_exPV;
      VarHandle< vector<float>* > cov_z0_qoverp_exPV;
      VarHandle< vector<float>* > cov_phi_theta_exPV;
      VarHandle< vector<float>* > cov_phi_qoverp_exPV;
      VarHandle< vector<float>* > cov_theta_qoverp_exPV;
      VarHandle< vector<float>* > id_cov_d0_exPV;
      VarHandle< vector<float>* > id_cov_z0_exPV;
      VarHandle< vector<float>* > id_cov_phi_exPV;
      VarHandle< vector<float>* > id_cov_theta_exPV;
      VarHandle< vector<float>* > id_cov_qoverp_exPV;
      VarHandle< vector<float>* > id_cov_d0_z0_exPV;
      VarHandle< vector<float>* > id_cov_d0_phi_exPV;
      VarHandle< vector<float>* > id_cov_d0_theta_exPV;
      VarHandle< vector<float>* > id_cov_d0_qoverp_exPV;
      VarHandle< vector<float>* > id_cov_z0_phi_exPV;
      VarHandle< vector<float>* > id_cov_z0_theta_exPV;
      VarHandle< vector<float>* > id_cov_z0_qoverp_exPV;
      VarHandle< vector<float>* > id_cov_phi_theta_exPV;
      VarHandle< vector<float>* > id_cov_phi_qoverp_exPV;
      VarHandle< vector<float>* > id_cov_theta_qoverp_exPV;
      VarHandle< vector<float>* > me_cov_d0_exPV;
      VarHandle< vector<float>* > me_cov_z0_exPV;
      VarHandle< vector<float>* > me_cov_phi_exPV;
      VarHandle< vector<float>* > me_cov_theta_exPV;
      VarHandle< vector<float>* > me_cov_qoverp_exPV;
      VarHandle< vector<float>* > ms_d0;
      VarHandle< vector<float>* > ms_z0;
      VarHandle< vector<float>* > ms_phi;
      VarHandle< vector<float>* > ms_theta;
      VarHandle< vector<float>* > ms_qoverp;
      VarHandle< vector<float>* > id_d0;
      VarHandle< vector<float>* > id_z0;
      VarHandle< vector<float>* > id_phi;
      VarHandle< vector<float>* > id_theta;
      VarHandle< vector<float>* > id_qoverp;
      VarHandle< vector<float>* > me_d0;
      VarHandle< vector<float>* > me_z0;
      VarHandle< vector<float>* > me_phi;
      VarHandle< vector<float>* > me_theta;
      VarHandle< vector<float>* > me_qoverp;
      VarHandle< vector<float>* > ie_d0;
      VarHandle< vector<float>* > ie_z0;
      VarHandle< vector<float>* > ie_phi;
      VarHandle< vector<float>* > ie_theta;
      VarHandle< vector<float>* > ie_qoverp;
      VarHandle< vector<int>* > nOutliersOnTrack;
      VarHandle< vector<int>* > nBLHits;
      VarHandle< vector<int>* > nPixHits;
      VarHandle< vector<int>* > nSCTHits;
      VarHandle< vector<int>* > nTRTHits;
      VarHandle< vector<int>* > nTRTHighTHits;
      VarHandle< vector<int>* > nBLSharedHits;
      VarHandle< vector<int>* > nPixSharedHits;
      VarHandle< vector<int>* > nPixHoles;
      VarHandle< vector<int>* > nSCTSharedHits;
      VarHandle< vector<int>* > nSCTHoles;
      VarHandle< vector<int>* > nTRTOutliers;
      VarHandle< vector<int>* > nTRTHighTOutliers;
      VarHandle< vector<int>* > nGangedPixels;
      VarHandle< vector<int>* > nPixelDeadSensors;
      VarHandle< vector<int>* > nSCTDeadSensors;
      VarHandle< vector<int>* > nTRTDeadStraws;
      VarHandle< vector<int>* > expectBLayerHit;
      VarHandle< vector<int>* > nMDTHits;
      VarHandle< vector<int>* > nMDTHoles;
      VarHandle< vector<int>* > nCSCEtaHits;
      VarHandle< vector<int>* > nCSCEtaHoles;
      VarHandle< vector<int>* > nCSCUnspoiledEtaHits;
      VarHandle< vector<int>* > nCSCPhiHits;
      VarHandle< vector<int>* > nCSCPhiHoles;
      VarHandle< vector<int>* > nRPCEtaHits;
      VarHandle< vector<int>* > nRPCEtaHoles;
      VarHandle< vector<int>* > nRPCPhiHits;
      VarHandle< vector<int>* > nRPCPhiHoles;
      VarHandle< vector<int>* > nTGCEtaHits;
      VarHandle< vector<int>* > nTGCEtaHoles;
      VarHandle< vector<int>* > nTGCPhiHits;
      VarHandle< vector<int>* > nTGCPhiHoles;
      VarHandle< vector<int>* > nprecisionLayers;
      VarHandle< vector<int>* > nprecisionHoleLayers;
      VarHandle< vector<int>* > nphiLayers;
      VarHandle< vector<int>* > ntrigEtaLayers;
      VarHandle< vector<int>* > nphiHoleLayers;
      VarHandle< vector<int>* > ntrigEtaHoleLayers;
      VarHandle< vector<int>* > nMDTBIHits;
      VarHandle< vector<int>* > nMDTBMHits;
      VarHandle< vector<int>* > nMDTBOHits;
      VarHandle< vector<int>* > nMDTBEEHits;
      VarHandle< vector<int>* > nMDTBIS78Hits;
      VarHandle< vector<int>* > nMDTEIHits;
      VarHandle< vector<int>* > nMDTEMHits;
      VarHandle< vector<int>* > nMDTEOHits;
      VarHandle< vector<int>* > nMDTEEHits;
      VarHandle< vector<int>* > nRPCLayer1EtaHits;
      VarHandle< vector<int>* > nRPCLayer2EtaHits;
      VarHandle< vector<int>* > nRPCLayer3EtaHits;
      VarHandle< vector<int>* > nRPCLayer1PhiHits;
      VarHandle< vector<int>* > nRPCLayer2PhiHits;
      VarHandle< vector<int>* > nRPCLayer3PhiHits;
      VarHandle< vector<int>* > nTGCLayer1EtaHits;
      VarHandle< vector<int>* > nTGCLayer2EtaHits;
      VarHandle< vector<int>* > nTGCLayer3EtaHits;
      VarHandle< vector<int>* > nTGCLayer4EtaHits;
      VarHandle< vector<int>* > nTGCLayer1PhiHits;
      VarHandle< vector<int>* > nTGCLayer2PhiHits;
      VarHandle< vector<int>* > nTGCLayer3PhiHits;
      VarHandle< vector<int>* > nTGCLayer4PhiHits;
      VarHandle< vector<int>* > barrelSectors;
      VarHandle< vector<int>* > endcapSectors;
      VarHandle< vector<float>* > trackd0;
      VarHandle< vector<float>* > trackz0;
      VarHandle< vector<float>* > trackphi;
      VarHandle< vector<float>* > tracktheta;
      VarHandle< vector<float>* > trackqoverp;
      VarHandle< vector<float>* > trackcov_d0;
      VarHandle< vector<float>* > trackcov_z0;
      VarHandle< vector<float>* > trackcov_phi;
      VarHandle< vector<float>* > trackcov_theta;
      VarHandle< vector<float>* > trackcov_qoverp;
      VarHandle< vector<float>* > trackcov_d0_z0;
      VarHandle< vector<float>* > trackcov_d0_phi;
      VarHandle< vector<float>* > trackcov_d0_theta;
      VarHandle< vector<float>* > trackcov_d0_qoverp;
      VarHandle< vector<float>* > trackcov_z0_phi;
      VarHandle< vector<float>* > trackcov_z0_theta;
      VarHandle< vector<float>* > trackcov_z0_qoverp;
      VarHandle< vector<float>* > trackcov_phi_theta;
      VarHandle< vector<float>* > trackcov_phi_qoverp;
      VarHandle< vector<float>* > trackcov_theta_qoverp;
      VarHandle< vector<int>* > hastrack;
      VarHandle< vector<float>* > trackIPEstimate_d0_biasedpvunbiased;
      VarHandle< vector<float>* > trackIPEstimate_z0_biasedpvunbiased;
      VarHandle< vector<float>* > trackIPEstimate_sigd0_biasedpvunbiased;
      VarHandle< vector<float>* > trackIPEstimate_sigz0_biasedpvunbiased;
      VarHandle< vector<float>* > trackIPEstimate_d0_unbiasedpvunbiased;
      VarHandle< vector<float>* > trackIPEstimate_z0_unbiasedpvunbiased;
      VarHandle< vector<float>* > trackIPEstimate_sigd0_unbiasedpvunbiased;
      VarHandle< vector<float>* > trackIPEstimate_sigz0_unbiasedpvunbiased;
// MC only
      /// MC particle type, from classifier tool
      VarHandle< vector<int>* > type;
      /// MC particle origin, from classifier tool
      VarHandle< vector<int>* > origin;
      VarHandle< vector<float>* > truth_dr;
      VarHandle< vector<float>* > truth_E;
      VarHandle< vector<float>* > truth_pt;
      VarHandle< vector<float>* > truth_eta;
      VarHandle< vector<float>* > truth_phi;
      VarHandle< vector<int>* > truth_type;
      VarHandle< vector<int>* > truth_status;
      VarHandle< vector<int>* > truth_barcode;
      VarHandle< vector<int>* > truth_mothertype;
      VarHandle< vector<int>* > truth_motherbarcode;
      VarHandle< vector<int>* > truth_matched;
// end MC only
      /// Index in trig_EF_trigmuonef_
      VarHandle< vector<int>* > EFCB_index;
      /// Index in trig_EF_trigmugirl_
      VarHandle< vector<int>* > EFMG_index;
      /// Index in trig_EF_trigmuonef_
      VarHandle< vector<int>* > EFME_index;
      VarHandle< vector<float>* > ptcone20_trk500MeV;
      VarHandle< vector<float>* > ptcone30_trk500MeV;
      VarHandle< vector<float>* > ptcone40_trk500MeV;
      VarHandle< vector<int>* > nucone20_trk500MeV;
      VarHandle< vector<int>* > nucone30_trk500MeV;
      VarHandle< vector<int>* > nucone40_trk500MeV;
      VarHandle< vector<float>* > ptcone20_trkelstyle;
      VarHandle< vector<float>* > ptcone30_trkelstyle;
      VarHandle< vector<float>* > ptcone40_trkelstyle;
      VarHandle< vector<int>* > nucone20_trkelstyle;
      VarHandle< vector<int>* > nucone30_trkelstyle;
      VarHandle< vector<int>* > nucone40_trkelstyle;
      VarHandle< vector<vector<float> >* > MET_Egamma10NoTau_wpx;
      VarHandle< vector<vector<float> >* > MET_Egamma10NoTau_wpy;
      VarHandle< vector<vector<float> >* > MET_Egamma10NoTau_wet;
      VarHandle< vector<vector<unsigned int> >* > MET_Egamma10NoTau_statusWord;
      VarHandle< vector<vector<float> >* > MET_LooseEgamma10NoTau_wpx;
      VarHandle< vector<vector<float> >* > MET_LooseEgamma10NoTau_wpy;
      VarHandle< vector<vector<float> >* > MET_LooseEgamma10NoTau_wet;
      VarHandle< vector<vector<unsigned int> >* > MET_LooseEgamma10NoTau_statusWord;
      VarHandle< vector<vector<float> >* > MET_Egamma10LooseTau_wpx;
      VarHandle< vector<vector<float> >* > MET_Egamma10LooseTau_wpy;
      VarHandle< vector<vector<float> >* > MET_Egamma10LooseTau_wet;
      VarHandle< vector<vector<unsigned int> >* > MET_Egamma10LooseTau_statusWord;
      VarHandle< vector<vector<float> >* > MET_wpx;
      VarHandle< vector<vector<float> >* > MET_wpy;
      VarHandle< vector<vector<float> >* > MET_wet;
      VarHandle< vector<vector<unsigned int> >* > MET_statusWord;

   private:
      mutable std::vector< MuonD3PDObjectElement > fProxies; ///< Internal list of proxy objects
      std::map< ::TString, VarHandleBase* > fHandles; ///< Book-keeper of the VarHandle members
      const ::Bool_t fFromInput; ///< Flag specifying if object is used for D3PD reading
      const ::TString fPrefix; ///< Prefix to the branch names


bool is_data; // ~bj 

      ClassDef( MuonD3PDObject, 0 )

   }; // class MuonD3PDObject

} // namespace D3PDReader

#endif // D3PDREADER_MuonD3PDObject_H
