// Dear emacs, this is -*- c++ -*-
// -------------------------------------------------------------
//             Code produced by D3PDMakerReader
//
//  author: Attila Krasznahorkay <Attila.Krasznahorkay@cern.ch>
// -------------------------------------------------------------
#ifndef D3PDREADER_JetD3PDObject_H
#define D3PDREADER_JetD3PDObject_H

#include <map>
#include <vector>
using std::vector;

#include <TObject.h>
#include <TString.h>

#include "VarHandle.h"
#include "VarProxy.h"

class TTree;

namespace D3PDReader {

   // Forward declaration(s):
   class JetD3PDObject;

   /**
    * Code generated by CodeGenerator_v2 on:
    *  host = pc-penn-d-07
    *  OS   = Linux / 2.6.18-274.18.1.el5
    *  user = bjackson
    */
   class JetD3PDObjectElement : public TObject {

      friend class JetD3PDObject;

   protected:
      /// Constructor only visible to JetD3PDObject
      JetD3PDObjectElement( size_t index, const JetD3PDObject& parent, bool is_data = true );

   public:
      /// Copy constructor
      JetD3PDObjectElement( const JetD3PDObjectElement& parent, bool is_data = true );

      VarProxy< vector<float> > MET_Egamma10NoTau_wpx;
      VarProxy< vector<float> > MET_Egamma10NoTau_wpy;
      VarProxy< vector<float> > MET_Egamma10NoTau_wet;
      VarProxy< vector<unsigned int> > MET_Egamma10NoTau_statusWord;
      VarProxy< float > E;
      VarProxy< float > pt;
      VarProxy< float > m;
      VarProxy< float > eta;
      VarProxy< float > phi;
      VarProxy< float > LArQuality;
      VarProxy< float > sumPtTrk;
      VarProxy< float > HECQuality;
      VarProxy< float > NegativeE;
      VarProxy< float > AverageLArQF;
      VarProxy< float > BCH_CORR_JET;
      VarProxy< float > BCH_CORR_CELL;
      VarProxy< int > SamplingMax;
      VarProxy< float > fracSamplingMax;
      VarProxy< float > hecf;
      VarProxy< float > emfrac;
      VarProxy< float > emscale_eta;
      VarProxy< float > ActiveArea;
      VarProxy< float > ActiveAreaPx;
      VarProxy< float > ActiveAreaPy;
      VarProxy< float > ActiveAreaPz;
      VarProxy< float > ActiveAreaE;
      VarProxy< float > jvtxf;
      VarProxy< float > constscale_E;
      VarProxy< float > constscale_pt;
      VarProxy< float > constscale_m;
      VarProxy< float > constscale_eta;
      VarProxy< float > constscale_phi;
      VarProxy< float > flavor_weight_MV1;
      VarProxy< int > isBadLooseMinus;
// MC only
      VarProxy< int > flavor_truth_label;
// end MC only


bool is_data; // ~bj 

      ClassDef( JetD3PDObjectElement, 0 )

   }; // class JetD3PDObjectElement

   /**
    * Code generated by CodeGenerator_v2 on:
    *  host = pc-penn-d-07
    *  OS   = Linux / 2.6.18-274.18.1.el5
    *  user = bjackson
    */
   class JetD3PDObject : public TObject {

   public:
      /// Constructor used when reading from a TTree
      JetD3PDObject( const ::Long64_t& master, const char* prefix = "jet_AntiKt4LCTopo_", bool is_data = true );
      /// Constructor when the object is only used for writing data out
      JetD3PDObject( const char* prefix = "jet_AntiKt4LCTopo_", bool is_data = true );

      /// Get the currently configured prefix value
      const char* GetPrefix() const;
      /// Set the prefix for the variables
      void SetPrefix( const char* prefix );

      /// Connect the object to an input TTree
      void ReadFrom( ::TTree* tree );
      /// Connect the object to an output TTree
      void WriteTo( ::TTree* tree );

      /// Turn (selected) branches either on or off
      void SetActive( ::Bool_t active = kTRUE,
                      const ::TString& pattern = ".*" );
      /// Read in all the variables that we need to write out as well
      void ReadAllActive();

      /// Clear the container. Useful when writing new branches.
      void Clear( Option_t* option = "" );
      /// Add one element to an output collection
      JetD3PDObject& Add( const JetD3PDObjectElement& el );

      /// Access a proxy class describing one element of the container
      JetD3PDObjectElement& operator[]( size_t index );
      /// Access a proxy class describing one element of the container (constant version)
      const JetD3PDObjectElement& operator[]( size_t index ) const;
      /// Add one element to an output collection
      JetD3PDObject& operator+=( const JetD3PDObjectElement& el );

      VarHandle< vector<vector<float> >* > MET_Egamma10NoTau_wpx;
      VarHandle< vector<vector<float> >* > MET_Egamma10NoTau_wpy;
      VarHandle< vector<vector<float> >* > MET_Egamma10NoTau_wet;
      VarHandle< vector<vector<unsigned int> >* > MET_Egamma10NoTau_statusWord;
      /// Number of ntuple rows.
      VarHandle< Int_t > n;
      VarHandle< vector<float>* > E;
      VarHandle< vector<float>* > pt;
      VarHandle< vector<float>* > m;
      VarHandle< vector<float>* > eta;
      VarHandle< vector<float>* > phi;
      VarHandle< vector<float>* > LArQuality;
      VarHandle< vector<float>* > sumPtTrk;
      VarHandle< vector<float>* > HECQuality;
      VarHandle< vector<float>* > NegativeE;
      VarHandle< vector<float>* > AverageLArQF;
      VarHandle< vector<float>* > BCH_CORR_JET;
      VarHandle< vector<float>* > BCH_CORR_CELL;     
      VarHandle< vector<int>* > SamplingMax;
      VarHandle< vector<float>* > fracSamplingMax;
      VarHandle< vector<float>* > hecf;
      VarHandle< vector<float>* > emfrac;
      VarHandle< vector<float>* > emscale_eta;
      VarHandle< vector<float>* > ActiveArea;
      VarHandle< vector<float>* > ActiveAreaPx;
      VarHandle< vector<float>* > ActiveAreaPy;
      VarHandle< vector<float>* > ActiveAreaPz;
      VarHandle< vector<float>* > ActiveAreaE;
      VarHandle< vector<float>* > jvtxf;
      VarHandle< vector<float>* > constscale_E;
      VarHandle< vector<float>* > constscale_pt;
      VarHandle< vector<float>* > constscale_m;
      VarHandle< vector<float>* > constscale_eta;
      VarHandle< vector<float>* > constscale_phi;
      VarHandle< vector<float>* > flavor_weight_MV1;
      VarHandle< vector<int>* > isBadLooseMinus;
// MC only
      VarHandle< vector<int>* > flavor_truth_label;
// end MC only

   private:
      mutable std::vector< JetD3PDObjectElement > fProxies; ///< Internal list of proxy objects
      std::map< ::TString, VarHandleBase* > fHandles; ///< Book-keeper of the VarHandle members
      const ::Bool_t fFromInput; ///< Flag specifying if object is used for D3PD reading
      const ::TString fPrefix; ///< Prefix to the branch names


bool is_data; // ~bj 

      ClassDef( JetD3PDObject, 0 )

   }; // class JetD3PDObject

} // namespace D3PDReader

#endif // D3PDREADER_JetD3PDObject_H
