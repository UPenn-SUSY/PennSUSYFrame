// Dear emacs, this is -*- c++ -*-
// -------------------------------------------------------------
//             Code produced by D3PDMakerReader
//
//  author: Attila Krasznahorkay <Attila.Krasznahorkay@cern.ch>
// -------------------------------------------------------------
#ifndef D3PDREADER_JetD3PDObject_H
#define D3PDREADER_JetD3PDObject_H

#include <map>
#include <vector>
using std::vector;

#include <TObject.h>
#include <TString.h>

#include "VarHandle.h"
#include "VarProxy.h"

class TTree;

namespace D3PDReader {

   // Forward declaration(s):
   class JetD3PDObject;

   /**
    * Code generated by CodeGenerator_v2 on:
    *  host = pc-penn-d-07
    *  OS   = Linux / 2.6.18-274.18.1.el5
    *  user = bjackson
    */
   class JetD3PDObjectElement : public TObject {

      friend class JetD3PDObject;

   protected:
      /// Constructor only visible to JetD3PDObject
      JetD3PDObjectElement( size_t index, const JetD3PDObject& parent, bool is_data = true );

   public:
      /// Copy constructor
      JetD3PDObjectElement( const JetD3PDObjectElement& parent, bool is_data = true );

      VarProxy< vector<float> > MET_Egamma10NoTau_wpx;
      VarProxy< vector<float> > MET_Egamma10NoTau_wpy;
      VarProxy< vector<float> > MET_Egamma10NoTau_wet;
      VarProxy< vector<unsigned int> > MET_Egamma10NoTau_statusWord;
      VarProxy< vector<float> > MET_Egamma10NoTau_STVF_wpx;
      VarProxy< vector<float> > MET_Egamma10NoTau_STVF_wpy;
      VarProxy< vector<float> > MET_Egamma10NoTau_STVF_wet;
      VarProxy< vector<unsigned int> > MET_Egamma10NoTau_STVF_statusWord;
      VarProxy< vector<float> > MET_LooseEgamma10NoTau_wpx;
      VarProxy< vector<float> > MET_LooseEgamma10NoTau_wpy;
      VarProxy< vector<float> > MET_LooseEgamma10NoTau_wet;
      VarProxy< vector<unsigned int> > MET_LooseEgamma10NoTau_statusWord;
      VarProxy< vector<float> > MET_wpx;
      VarProxy< vector<float> > MET_wpy;
      VarProxy< vector<float> > MET_wet;
      VarProxy< vector<unsigned int> > MET_statusWord;
      VarProxy< vector<float> > MET_STVF_wpx;
      VarProxy< vector<float> > MET_STVF_wpy;
      VarProxy< vector<float> > MET_STVF_wet;
      VarProxy< vector<unsigned int> > MET_STVF_statusWord;
      VarProxy< float > E;
      VarProxy< float > pt;
      VarProxy< float > m;
      VarProxy< float > eta;
      VarProxy< float > phi;
      VarProxy< float > EtaOrigin;
      VarProxy< float > PhiOrigin;
      VarProxy< float > MOrigin;
      VarProxy< float > EtaOriginEM;
      VarProxy< float > PhiOriginEM;
      VarProxy< float > MOriginEM;
      VarProxy< float > WIDTH;
      VarProxy< float > n90;
      VarProxy< float > Timing;
      VarProxy< float > LArQuality;
      VarProxy< float > nTrk;
      VarProxy< float > sumPtTrk;
      VarProxy< float > OriginIndex;
      VarProxy< float > HECQuality;
      VarProxy< float > NegativeE;
      VarProxy< float > AverageLArQF;
      VarProxy< float > YFlip12;
      VarProxy< float > YFlip23;
      VarProxy< float > BCH_CORR_CELL;
      VarProxy< float > BCH_CORR_DOTX;
      VarProxy< float > BCH_CORR_JET;
      VarProxy< float > BCH_CORR_JET_FORCELL;
      VarProxy< float > ENG_BAD_CELLS;
      VarProxy< float > N_BAD_CELLS;
      VarProxy< float > N_BAD_CELLS_CORR;
      VarProxy< float > BAD_CELLS_CORR_E;
      VarProxy< float > NumTowers;
      VarProxy< float > ootFracCells5;
      VarProxy< float > ootFracCells10;
      VarProxy< float > ootFracClusters5;
      VarProxy< float > ootFracClusters10;
      VarProxy< int > SamplingMax;
      VarProxy< float > fracSamplingMax;
      VarProxy< float > hecf;
      VarProxy< float > tgap3f;
      VarProxy< int > isUgly;
      VarProxy< int > isBadLooseMinus;
      VarProxy< int > isBadLoose;
      VarProxy< int > isBadMedium;
      VarProxy< int > isBadTight;
      VarProxy< float > emfrac;
      VarProxy< float > Offset;
      VarProxy< float > EMJES;
      VarProxy< float > EMJES_EtaCorr;
      VarProxy< float > EMJESnooffset;
      VarProxy< float > GCWJES;
      VarProxy< float > GCWJES_EtaCorr;
      VarProxy< float > CB;
      VarProxy< float > LCJES;
      VarProxy< float > emscale_E;
      VarProxy< float > emscale_pt;
      VarProxy< float > emscale_m;
      VarProxy< float > emscale_eta;
      VarProxy< float > emscale_phi;
      VarProxy< float > jvtx_x;
      VarProxy< float > jvtx_y;
      VarProxy< float > jvtx_z;
      VarProxy< float > jvtxf;
      VarProxy< vector<float> > jvtxfFull;
      VarProxy< float > GSCFactorF;
      VarProxy< float > WidthFraction;
      VarProxy< float > e_PreSamplerB;
      VarProxy< float > e_EMB1;
      VarProxy< float > e_EMB2;
      VarProxy< float > e_EMB3;
      VarProxy< float > e_PreSamplerE;
      VarProxy< float > e_EME1;
      VarProxy< float > e_EME2;
      VarProxy< float > e_EME3;
      VarProxy< float > e_HEC0;
      VarProxy< float > e_HEC1;
      VarProxy< float > e_HEC2;
      VarProxy< float > e_HEC3;
      VarProxy< float > e_TileBar0;
      VarProxy< float > e_TileBar1;
      VarProxy< float > e_TileBar2;
      VarProxy< float > e_TileGap1;
      VarProxy< float > e_TileGap2;
      VarProxy< float > e_TileGap3;
      VarProxy< float > e_TileExt0;
      VarProxy< float > e_TileExt1;
      VarProxy< float > e_TileExt2;
      VarProxy< float > e_FCAL0;
      VarProxy< float > e_FCAL1;
      VarProxy< float > e_FCAL2;
      VarProxy< int > Nconst;
      VarProxy< vector<float> > ptconst_default;
      VarProxy< vector<float> > econst_default;
      VarProxy< vector<float> > etaconst_default;
      VarProxy< vector<float> > phiconst_default;
      VarProxy< vector<float> > weightconst_default;
      VarProxy< float > constscale_E;
      VarProxy< float > constscale_pt;
      VarProxy< float > constscale_m;
      VarProxy< float > constscale_eta;
      VarProxy< float > constscale_phi;
      VarProxy< float > flavor_weight_Comb;
      VarProxy< float > flavor_weight_IP2D;
      VarProxy< float > flavor_weight_IP3D;
      VarProxy< float > flavor_weight_SV0;
      VarProxy< float > flavor_weight_SV1;
      VarProxy< float > flavor_weight_SV2;
      VarProxy< float > flavor_weight_SoftMuonTagChi2;
      VarProxy< float > flavor_weight_SecondSoftMuonTagChi2;
      VarProxy< float > flavor_weight_JetFitterTagNN;
      VarProxy< float > flavor_weight_JetFitterCOMBNN;
      VarProxy< float > flavor_weight_MV1;
      VarProxy< float > flavor_weight_MV2;
      VarProxy< float > flavor_weight_GbbNN;
// MC only
      VarProxy< int > flavor_truth_label;
      VarProxy< float > flavor_truth_dRminToB;
      VarProxy< float > flavor_truth_dRminToC;
      VarProxy< float > flavor_truth_dRminToT;
      VarProxy< int > flavor_truth_BHadronpdg;
      VarProxy< float > flavor_truth_vx_x;
      VarProxy< float > flavor_truth_vx_y;
      VarProxy< float > flavor_truth_vx_z;
// end MC only
      /// UNDOCUMENTED
      VarProxy< float > flavor_component_ip2d_pu;
      /// UNDOCUMENTED
      VarProxy< float > flavor_component_ip2d_pb;
      VarProxy< int > flavor_component_ip2d_isValid;
      /// UNDOCUMENTED
      VarProxy< int > flavor_component_ip2d_ntrk;
      /// UNDOCUMENTED
      VarProxy< float > flavor_component_ip3d_pu;
      /// UNDOCUMENTED
      VarProxy< float > flavor_component_ip3d_pb;
      VarProxy< int > flavor_component_ip3d_isValid;
      /// UNDOCUMENTED
      VarProxy< int > flavor_component_ip3d_ntrk;
      /// UNDOCUMENTED
      VarProxy< float > flavor_component_sv1_pu;
      /// UNDOCUMENTED
      VarProxy< float > flavor_component_sv1_pb;
      VarProxy< int > flavor_component_sv1_isValid;
      /// UNDOCUMENTED
      VarProxy< float > flavor_component_sv2_pu;
      /// UNDOCUMENTED
      VarProxy< float > flavor_component_sv2_pb;
      VarProxy< int > flavor_component_sv2_isValid;
      /// UNDOCUMENTED
      VarProxy< float > flavor_component_jfit_pu;
      /// UNDOCUMENTED
      VarProxy< float > flavor_component_jfit_pb;
      /// UNDOCUMENTED
      VarProxy< float > flavor_component_jfit_pc;
      VarProxy< int > flavor_component_jfit_isValid;
      /// UNDOCUMENTED
      VarProxy< float > flavor_component_jfitcomb_pu;
      /// UNDOCUMENTED
      VarProxy< float > flavor_component_jfitcomb_pb;
      /// UNDOCUMENTED
      VarProxy< float > flavor_component_jfitcomb_pc;
      VarProxy< int > flavor_component_jfitcomb_isValid;
      /// UNDOCUMENTED
      VarProxy< int > flavor_component_jfit_nvtx;
      /// UNDOCUMENTED
      VarProxy< int > flavor_component_jfit_nvtx1t;
      /// UNDOCUMENTED
      VarProxy< int > flavor_component_jfit_ntrkAtVx;
      /// UNDOCUMENTED
      VarProxy< float > flavor_component_jfit_efrc;
      /// UNDOCUMENTED
      VarProxy< float > flavor_component_jfit_mass;
      /// UNDOCUMENTED
      VarProxy< float > flavor_component_jfit_sig3d;
      /// UNDOCUMENTED
      VarProxy< float > flavor_component_jfit_deltaPhi;
      /// UNDOCUMENTED
      VarProxy< float > flavor_component_jfit_deltaEta;
      VarProxy< int > flavor_component_svp_isValid;
      /// UNDOCUMENTED
      VarProxy< int > flavor_component_svp_ntrkv;
      /// UNDOCUMENTED
      VarProxy< int > flavor_component_svp_ntrkj;
      /// UNDOCUMENTED
      VarProxy< int > flavor_component_svp_n2t;
      /// UNDOCUMENTED
      VarProxy< float > flavor_component_svp_mass;
      /// UNDOCUMENTED
      VarProxy< float > flavor_component_svp_efrc;
      VarProxy< float > flavor_component_svp_x;
      VarProxy< float > flavor_component_svp_y;
      VarProxy< float > flavor_component_svp_z;
      VarProxy< float > flavor_component_svp_err_x;
      VarProxy< float > flavor_component_svp_err_y;
      VarProxy< float > flavor_component_svp_err_z;
      VarProxy< float > flavor_component_svp_cov_xy;
      VarProxy< float > flavor_component_svp_cov_xz;
      VarProxy< float > flavor_component_svp_cov_yz;
      /// UNDOCUMENTED
      VarProxy< float > flavor_component_svp_chi2;
      /// UNDOCUMENTED
      VarProxy< int > flavor_component_svp_ndof;
      /// UNDOCUMENTED
      VarProxy< int > flavor_component_svp_ntrk;
      VarProxy< int > flavor_component_sv0p_isValid;
      /// UNDOCUMENTED
      VarProxy< int > flavor_component_sv0p_ntrkv;
      /// UNDOCUMENTED
      VarProxy< int > flavor_component_sv0p_ntrkj;
      /// UNDOCUMENTED
      VarProxy< int > flavor_component_sv0p_n2t;
      /// UNDOCUMENTED
      VarProxy< float > flavor_component_sv0p_mass;
      /// UNDOCUMENTED
      VarProxy< float > flavor_component_sv0p_efrc;
      VarProxy< float > flavor_component_sv0p_x;
      VarProxy< float > flavor_component_sv0p_y;
      VarProxy< float > flavor_component_sv0p_z;
      VarProxy< float > flavor_component_sv0p_err_x;
      VarProxy< float > flavor_component_sv0p_err_y;
      VarProxy< float > flavor_component_sv0p_err_z;
      VarProxy< float > flavor_component_sv0p_cov_xy;
      VarProxy< float > flavor_component_sv0p_cov_xz;
      VarProxy< float > flavor_component_sv0p_cov_yz;
      /// UNDOCUMENTED
      VarProxy< float > flavor_component_sv0p_chi2;
      /// UNDOCUMENTED
      VarProxy< int > flavor_component_sv0p_ndof;
      /// UNDOCUMENTED
      VarProxy< int > flavor_component_sv0p_ntrk;
      /// Number of ntuple rows.
      VarProxy< int > flavor_assoctrk_n;
      /// Index in trk
      VarProxy< vector<int> > flavor_assoctrk_index;
      VarProxy< float > el_dr;
      VarProxy< int > el_matched;
      VarProxy< float > mu_dr;
      VarProxy< int > mu_matched;
      /// DeltaR between the offline and trigger objects.
      VarProxy< float > L1_dr;
      VarProxy< int > L1_matched;
      /// DeltaR between the offline and trigger objects.
      VarProxy< float > L2_dr;
      VarProxy< int > L2_matched;
      /// DeltaR between the offline and trigger objects.
      VarProxy< float > EF_dr;
      VarProxy< int > EF_matched;
      VarProxy< int > bbDecision;
      VarProxy< float > SmearingFactor;


bool is_data; // ~bj 

      ClassDef( JetD3PDObjectElement, 0 )

   }; // class JetD3PDObjectElement

   /**
    * Code generated by CodeGenerator_v2 on:
    *  host = pc-penn-d-07
    *  OS   = Linux / 2.6.18-274.18.1.el5
    *  user = bjackson
    */
   class JetD3PDObject : public TObject {

   public:
      /// Constructor used when reading from a TTree
      JetD3PDObject( const ::Long64_t& master, const char* prefix = "jet_AntiKt4LCTopo_", bool is_data = true );
      /// Constructor when the object is only used for writing data out
      JetD3PDObject( const char* prefix = "jet_AntiKt4LCTopo_", bool is_data = true );

      /// Get the currently configured prefix value
      const char* GetPrefix() const;
      /// Set the prefix for the variables
      void SetPrefix( const char* prefix );

      /// Connect the object to an input TTree
      void ReadFrom( ::TTree* tree );
      /// Connect the object to an output TTree
      void WriteTo( ::TTree* tree );

      /// Turn (selected) branches either on or off
      void SetActive( ::Bool_t active = kTRUE,
                      const ::TString& pattern = ".*" );
      /// Read in all the variables that we need to write out as well
      void ReadAllActive();

      /// Clear the container. Useful when writing new branches.
      void Clear( Option_t* option = "" );
      /// Add one element to an output collection
      JetD3PDObject& Add( const JetD3PDObjectElement& el );

      /// Access a proxy class describing one element of the container
      JetD3PDObjectElement& operator[]( size_t index );
      /// Access a proxy class describing one element of the container (constant version)
      const JetD3PDObjectElement& operator[]( size_t index ) const;
      /// Add one element to an output collection
      JetD3PDObject& operator+=( const JetD3PDObjectElement& el );

      VarHandle< vector<vector<float> >* > MET_Egamma10NoTau_wpx;
      VarHandle< vector<vector<float> >* > MET_Egamma10NoTau_wpy;
      VarHandle< vector<vector<float> >* > MET_Egamma10NoTau_wet;
      VarHandle< vector<vector<unsigned int> >* > MET_Egamma10NoTau_statusWord;
      VarHandle< vector<vector<float> >* > MET_Egamma10NoTau_STVF_wpx;
      VarHandle< vector<vector<float> >* > MET_Egamma10NoTau_STVF_wpy;
      VarHandle< vector<vector<float> >* > MET_Egamma10NoTau_STVF_wet;
      VarHandle< vector<vector<unsigned int> >* > MET_Egamma10NoTau_STVF_statusWord;
      VarHandle< vector<vector<float> >* > MET_LooseEgamma10NoTau_wpx;
      VarHandle< vector<vector<float> >* > MET_LooseEgamma10NoTau_wpy;
      VarHandle< vector<vector<float> >* > MET_LooseEgamma10NoTau_wet;
      VarHandle< vector<vector<unsigned int> >* > MET_LooseEgamma10NoTau_statusWord;
      VarHandle< vector<vector<float> >* > MET_wpx;
      VarHandle< vector<vector<float> >* > MET_wpy;
      VarHandle< vector<vector<float> >* > MET_wet;
      VarHandle< vector<vector<unsigned int> >* > MET_statusWord;
      VarHandle< vector<vector<float> >* > MET_STVF_wpx;
      VarHandle< vector<vector<float> >* > MET_STVF_wpy;
      VarHandle< vector<vector<float> >* > MET_STVF_wet;
      VarHandle< vector<vector<unsigned int> >* > MET_STVF_statusWord;
      /// Number of ntuple rows.
      VarHandle< Int_t > n;
      VarHandle< vector<float>* > E;
      VarHandle< vector<float>* > pt;
      VarHandle< vector<float>* > m;
      VarHandle< vector<float>* > eta;
      VarHandle< vector<float>* > phi;
      VarHandle< vector<float>* > EtaOrigin;
      VarHandle< vector<float>* > PhiOrigin;
      VarHandle< vector<float>* > MOrigin;
      VarHandle< vector<float>* > EtaOriginEM;
      VarHandle< vector<float>* > PhiOriginEM;
      VarHandle< vector<float>* > MOriginEM;
      VarHandle< vector<float>* > WIDTH;
      VarHandle< vector<float>* > n90;
      VarHandle< vector<float>* > Timing;
      VarHandle< vector<float>* > LArQuality;
      VarHandle< vector<float>* > nTrk;
      VarHandle< vector<float>* > sumPtTrk;
      VarHandle< vector<float>* > OriginIndex;
      VarHandle< vector<float>* > HECQuality;
      VarHandle< vector<float>* > NegativeE;
      VarHandle< vector<float>* > AverageLArQF;
      VarHandle< vector<float>* > YFlip12;
      VarHandle< vector<float>* > YFlip23;
      VarHandle< vector<float>* > BCH_CORR_CELL;
      VarHandle< vector<float>* > BCH_CORR_DOTX;
      VarHandle< vector<float>* > BCH_CORR_JET;
      VarHandle< vector<float>* > BCH_CORR_JET_FORCELL;
      VarHandle< vector<float>* > ENG_BAD_CELLS;
      VarHandle< vector<float>* > N_BAD_CELLS;
      VarHandle< vector<float>* > N_BAD_CELLS_CORR;
      VarHandle< vector<float>* > BAD_CELLS_CORR_E;
      VarHandle< vector<float>* > NumTowers;
      VarHandle< vector<float>* > ootFracCells5;
      VarHandle< vector<float>* > ootFracCells10;
      VarHandle< vector<float>* > ootFracClusters5;
      VarHandle< vector<float>* > ootFracClusters10;
      VarHandle< vector<int>* > SamplingMax;
      VarHandle< vector<float>* > fracSamplingMax;
      VarHandle< vector<float>* > hecf;
      VarHandle< vector<float>* > tgap3f;
      VarHandle< vector<int>* > isUgly;
      VarHandle< vector<int>* > isBadLooseMinus;
      VarHandle< vector<int>* > isBadLoose;
      VarHandle< vector<int>* > isBadMedium;
      VarHandle< vector<int>* > isBadTight;
      VarHandle< vector<float>* > emfrac;
      VarHandle< vector<float>* > Offset;
      VarHandle< vector<float>* > EMJES;
      VarHandle< vector<float>* > EMJES_EtaCorr;
      VarHandle< vector<float>* > EMJESnooffset;
      VarHandle< vector<float>* > GCWJES;
      VarHandle< vector<float>* > GCWJES_EtaCorr;
      VarHandle< vector<float>* > CB;
      VarHandle< vector<float>* > LCJES;
      VarHandle< vector<float>* > emscale_E;
      VarHandle< vector<float>* > emscale_pt;
      VarHandle< vector<float>* > emscale_m;
      VarHandle< vector<float>* > emscale_eta;
      VarHandle< vector<float>* > emscale_phi;
      VarHandle< vector<float>* > jvtx_x;
      VarHandle< vector<float>* > jvtx_y;
      VarHandle< vector<float>* > jvtx_z;
      VarHandle< vector<float>* > jvtxf;
      VarHandle< vector<vector<float> >* > jvtxfFull;
      VarHandle< vector<float>* > GSCFactorF;
      VarHandle< vector<float>* > WidthFraction;
      VarHandle< vector<float>* > e_PreSamplerB;
      VarHandle< vector<float>* > e_EMB1;
      VarHandle< vector<float>* > e_EMB2;
      VarHandle< vector<float>* > e_EMB3;
      VarHandle< vector<float>* > e_PreSamplerE;
      VarHandle< vector<float>* > e_EME1;
      VarHandle< vector<float>* > e_EME2;
      VarHandle< vector<float>* > e_EME3;
      VarHandle< vector<float>* > e_HEC0;
      VarHandle< vector<float>* > e_HEC1;
      VarHandle< vector<float>* > e_HEC2;
      VarHandle< vector<float>* > e_HEC3;
      VarHandle< vector<float>* > e_TileBar0;
      VarHandle< vector<float>* > e_TileBar1;
      VarHandle< vector<float>* > e_TileBar2;
      VarHandle< vector<float>* > e_TileGap1;
      VarHandle< vector<float>* > e_TileGap2;
      VarHandle< vector<float>* > e_TileGap3;
      VarHandle< vector<float>* > e_TileExt0;
      VarHandle< vector<float>* > e_TileExt1;
      VarHandle< vector<float>* > e_TileExt2;
      VarHandle< vector<float>* > e_FCAL0;
      VarHandle< vector<float>* > e_FCAL1;
      VarHandle< vector<float>* > e_FCAL2;
      VarHandle< vector<int>* > Nconst;
      VarHandle< vector<vector<float> >* > ptconst_default;
      VarHandle< vector<vector<float> >* > econst_default;
      VarHandle< vector<vector<float> >* > etaconst_default;
      VarHandle< vector<vector<float> >* > phiconst_default;
      VarHandle< vector<vector<float> >* > weightconst_default;
      VarHandle< vector<float>* > constscale_E;
      VarHandle< vector<float>* > constscale_pt;
      VarHandle< vector<float>* > constscale_m;
      VarHandle< vector<float>* > constscale_eta;
      VarHandle< vector<float>* > constscale_phi;
      VarHandle< vector<float>* > flavor_weight_Comb;
      VarHandle< vector<float>* > flavor_weight_IP2D;
      VarHandle< vector<float>* > flavor_weight_IP3D;
      VarHandle< vector<float>* > flavor_weight_SV0;
      VarHandle< vector<float>* > flavor_weight_SV1;
      VarHandle< vector<float>* > flavor_weight_SV2;
      VarHandle< vector<float>* > flavor_weight_SoftMuonTagChi2;
      VarHandle< vector<float>* > flavor_weight_SecondSoftMuonTagChi2;
      VarHandle< vector<float>* > flavor_weight_JetFitterTagNN;
      VarHandle< vector<float>* > flavor_weight_JetFitterCOMBNN;
      VarHandle< vector<float>* > flavor_weight_MV1;
      VarHandle< vector<float>* > flavor_weight_MV2;
      VarHandle< vector<float>* > flavor_weight_GbbNN;
// MC only
      VarHandle< vector<int>* > flavor_truth_label;
      VarHandle< vector<float>* > flavor_truth_dRminToB;
      VarHandle< vector<float>* > flavor_truth_dRminToC;
      VarHandle< vector<float>* > flavor_truth_dRminToT;
      VarHandle< vector<int>* > flavor_truth_BHadronpdg;
      VarHandle< vector<float>* > flavor_truth_vx_x;
      VarHandle< vector<float>* > flavor_truth_vx_y;
      VarHandle< vector<float>* > flavor_truth_vx_z;
// end MC only
      /// UNDOCUMENTED
      VarHandle< vector<float>* > flavor_component_ip2d_pu;
      /// UNDOCUMENTED
      VarHandle< vector<float>* > flavor_component_ip2d_pb;
      VarHandle< vector<int>* > flavor_component_ip2d_isValid;
      /// UNDOCUMENTED
      VarHandle< vector<int>* > flavor_component_ip2d_ntrk;
      /// UNDOCUMENTED
      VarHandle< vector<float>* > flavor_component_ip3d_pu;
      /// UNDOCUMENTED
      VarHandle< vector<float>* > flavor_component_ip3d_pb;
      VarHandle< vector<int>* > flavor_component_ip3d_isValid;
      /// UNDOCUMENTED
      VarHandle< vector<int>* > flavor_component_ip3d_ntrk;
      /// UNDOCUMENTED
      VarHandle< vector<float>* > flavor_component_sv1_pu;
      /// UNDOCUMENTED
      VarHandle< vector<float>* > flavor_component_sv1_pb;
      VarHandle< vector<int>* > flavor_component_sv1_isValid;
      /// UNDOCUMENTED
      VarHandle< vector<float>* > flavor_component_sv2_pu;
      /// UNDOCUMENTED
      VarHandle< vector<float>* > flavor_component_sv2_pb;
      VarHandle< vector<int>* > flavor_component_sv2_isValid;
      /// UNDOCUMENTED
      VarHandle< vector<float>* > flavor_component_jfit_pu;
      /// UNDOCUMENTED
      VarHandle< vector<float>* > flavor_component_jfit_pb;
      /// UNDOCUMENTED
      VarHandle< vector<float>* > flavor_component_jfit_pc;
      VarHandle< vector<int>* > flavor_component_jfit_isValid;
      /// UNDOCUMENTED
      VarHandle< vector<float>* > flavor_component_jfitcomb_pu;
      /// UNDOCUMENTED
      VarHandle< vector<float>* > flavor_component_jfitcomb_pb;
      /// UNDOCUMENTED
      VarHandle< vector<float>* > flavor_component_jfitcomb_pc;
      VarHandle< vector<int>* > flavor_component_jfitcomb_isValid;
      /// UNDOCUMENTED
      VarHandle< vector<int>* > flavor_component_jfit_nvtx;
      /// UNDOCUMENTED
      VarHandle< vector<int>* > flavor_component_jfit_nvtx1t;
      /// UNDOCUMENTED
      VarHandle< vector<int>* > flavor_component_jfit_ntrkAtVx;
      /// UNDOCUMENTED
      VarHandle< vector<float>* > flavor_component_jfit_efrc;
      /// UNDOCUMENTED
      VarHandle< vector<float>* > flavor_component_jfit_mass;
      /// UNDOCUMENTED
      VarHandle< vector<float>* > flavor_component_jfit_sig3d;
      /// UNDOCUMENTED
      VarHandle< vector<float>* > flavor_component_jfit_deltaPhi;
      /// UNDOCUMENTED
      VarHandle< vector<float>* > flavor_component_jfit_deltaEta;
      VarHandle< vector<int>* > flavor_component_svp_isValid;
      /// UNDOCUMENTED
      VarHandle< vector<int>* > flavor_component_svp_ntrkv;
      /// UNDOCUMENTED
      VarHandle< vector<int>* > flavor_component_svp_ntrkj;
      /// UNDOCUMENTED
      VarHandle< vector<int>* > flavor_component_svp_n2t;
      /// UNDOCUMENTED
      VarHandle< vector<float>* > flavor_component_svp_mass;
      /// UNDOCUMENTED
      VarHandle< vector<float>* > flavor_component_svp_efrc;
      VarHandle< vector<float>* > flavor_component_svp_x;
      VarHandle< vector<float>* > flavor_component_svp_y;
      VarHandle< vector<float>* > flavor_component_svp_z;
      VarHandle< vector<float>* > flavor_component_svp_err_x;
      VarHandle< vector<float>* > flavor_component_svp_err_y;
      VarHandle< vector<float>* > flavor_component_svp_err_z;
      VarHandle< vector<float>* > flavor_component_svp_cov_xy;
      VarHandle< vector<float>* > flavor_component_svp_cov_xz;
      VarHandle< vector<float>* > flavor_component_svp_cov_yz;
      /// UNDOCUMENTED
      VarHandle< vector<float>* > flavor_component_svp_chi2;
      /// UNDOCUMENTED
      VarHandle< vector<int>* > flavor_component_svp_ndof;
      /// UNDOCUMENTED
      VarHandle< vector<int>* > flavor_component_svp_ntrk;
      VarHandle< vector<int>* > flavor_component_sv0p_isValid;
      /// UNDOCUMENTED
      VarHandle< vector<int>* > flavor_component_sv0p_ntrkv;
      /// UNDOCUMENTED
      VarHandle< vector<int>* > flavor_component_sv0p_ntrkj;
      /// UNDOCUMENTED
      VarHandle< vector<int>* > flavor_component_sv0p_n2t;
      /// UNDOCUMENTED
      VarHandle< vector<float>* > flavor_component_sv0p_mass;
      /// UNDOCUMENTED
      VarHandle< vector<float>* > flavor_component_sv0p_efrc;
      VarHandle< vector<float>* > flavor_component_sv0p_x;
      VarHandle< vector<float>* > flavor_component_sv0p_y;
      VarHandle< vector<float>* > flavor_component_sv0p_z;
      VarHandle< vector<float>* > flavor_component_sv0p_err_x;
      VarHandle< vector<float>* > flavor_component_sv0p_err_y;
      VarHandle< vector<float>* > flavor_component_sv0p_err_z;
      VarHandle< vector<float>* > flavor_component_sv0p_cov_xy;
      VarHandle< vector<float>* > flavor_component_sv0p_cov_xz;
      VarHandle< vector<float>* > flavor_component_sv0p_cov_yz;
      /// UNDOCUMENTED
      VarHandle< vector<float>* > flavor_component_sv0p_chi2;
      /// UNDOCUMENTED
      VarHandle< vector<int>* > flavor_component_sv0p_ndof;
      /// UNDOCUMENTED
      VarHandle< vector<int>* > flavor_component_sv0p_ntrk;
      /// Number of ntuple rows.
      VarHandle< vector<int>* > flavor_assoctrk_n;
      /// Index in trk
      VarHandle< vector<vector<int> >* > flavor_assoctrk_index;
      VarHandle< vector<float>* > el_dr;
      VarHandle< vector<int>* > el_matched;
      VarHandle< vector<float>* > mu_dr;
      VarHandle< vector<int>* > mu_matched;
      /// DeltaR between the offline and trigger objects.
      VarHandle< vector<float>* > L1_dr;
      VarHandle< vector<int>* > L1_matched;
      /// DeltaR between the offline and trigger objects.
      VarHandle< vector<float>* > L2_dr;
      VarHandle< vector<int>* > L2_matched;
      /// DeltaR between the offline and trigger objects.
      VarHandle< vector<float>* > EF_dr;
      VarHandle< vector<int>* > EF_matched;
      VarHandle< vector<int>* > bbDecision;
      VarHandle< vector<float>* > SmearingFactor;

   private:
      mutable std::vector< JetD3PDObjectElement > fProxies; ///< Internal list of proxy objects
      std::map< ::TString, VarHandleBase* > fHandles; ///< Book-keeper of the VarHandle members
      const ::Bool_t fFromInput; ///< Flag specifying if object is used for D3PD reading
      const ::TString fPrefix; ///< Prefix to the branch names


bool is_data; // ~bj 

      ClassDef( JetD3PDObject, 0 )

   }; // class JetD3PDObject

} // namespace D3PDReader

#endif // D3PDREADER_JetD3PDObject_H
