// Dear emacs, this is -*- c++ -*-
// -------------------------------------------------------------
//             Code produced by D3PDMakerReader
//
//  author: Attila Krasznahorkay <Attila.Krasznahorkay@cern.ch>
// -------------------------------------------------------------
#ifndef D3PDREADER_TruthD3PDObject_H
#define D3PDREADER_TruthD3PDObject_H

#include <map>
#include <vector>
using std::vector;

#include <TObject.h>
#include <TString.h>

#include "VarHandle.h"

class TTree;

namespace D3PDReader {

   /**
    * Code generated by CodeGenerator_v2 on:
    *  host = pc-penn-d-07
    *  OS   = Linux / 2.6.18-274.18.1.el5
    *  user = bjackson
    *  time = Wed Feb  6 10:48:29 2013
    */
   class TruthD3PDObject : public TObject {

   public:
      /// Constructor used when reading from a TTree
      TruthD3PDObject( const ::Long64_t& master, const char* prefix = "" );
      /// Constructor when the object is only used for writing data out
      TruthD3PDObject( const char* prefix = "" );

      /// Get the currently configured prefix value
      const char* GetPrefix() const;
      /// Set the prefix for the variables
      void SetPrefix( const char* prefix );

      /// Connect the object to an input TTree
      void ReadFrom( ::TTree* tree );
      /// Connect the object to an output TTree
      void WriteTo( ::TTree* tree );

      /// Turn (selected) branches either on or off
      void SetActive( ::Bool_t active = kTRUE,
                      const ::TString& pattern = ".*" );
      /// Read in all the variables that we need to write out as well
      void ReadAllActive();

      /// Interactions per crossing for the current BCID - for in-time pile-up
      VarHandle< Float_t > actualIntPerXing;
      /// Interactions per crossing for all BCIDs - for out-of-time pile-up
      VarHandle< Float_t > averageIntPerXing;
      /// MC generator channel number; was used as run number for generator events
      VarHandle< UInt_t > mc_channel_number;
      /// MC generator event number
      VarHandle< UInt_t > mc_event_number;
      /// MC weight, coming from the EventType object
      VarHandle< Float_t > mc_event_weight;
      /// Number of ntuple rows.
      VarHandle< Int_t > mc_n;
      VarHandle< vector<float>* > mc_pt;
      VarHandle< vector<float>* > mc_m;
      VarHandle< vector<float>* > mc_eta;
      VarHandle< vector<float>* > mc_phi;
      VarHandle< vector<int>* > mc_status;
      VarHandle< vector<int>* > mc_barcode;
      VarHandle< vector<int>* > mc_pdgId;
      VarHandle< vector<float>* > mc_charge;
      VarHandle< vector<vector<int> >* > mc_parents;
      VarHandle< vector<vector<int> >* > mc_children;
      /// Vertex x position
      VarHandle< vector<float>* > mc_vx_x;
      /// Vertex y position
      VarHandle< vector<float>* > mc_vx_y;
      /// Vertex z position
      VarHandle< vector<float>* > mc_vx_z;
      /// Vertex barcode
      VarHandle< vector<int>* > mc_vx_barcode;
      /// Index in mc_
      VarHandle< vector<vector<int> >* > mc_child_index;
      /// Index in mc_
      VarHandle< vector<vector<int> >* > mc_parent_index;

   private:
      std::map< ::TString, VarHandleBase* > fHandles; ///< Book-keeper of the VarHandle members
      const ::Bool_t fFromInput; ///< Flag specifying if object is used for D3PD reading
      const ::TString fPrefix; ///< Prefix to the branch names

      ClassDef( TruthD3PDObject, 0 )

   }; // class TruthD3PDObject

} // namespace D3PDReader

#endif // D3PDREADER_TruthD3PDObject_H
