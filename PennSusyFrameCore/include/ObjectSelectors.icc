// Dear emacs, this is -*- c++ -*-
#ifndef PennSusyFrame_ObjectSelectors_icc
#define PennSusyFrame_ObjectSelectors_icc

// #include "PennSusyFrameCore/include/ObjectSelectors.h"

// =============================================================================
namespace PennSusyFrame
{
  // -----------------------------------------------------------------------------
  template <class selector, class T>
    std::vector<T*> selectObjects(selector& sel, const std::vector<T*>* t)
    {
      std::vector<T*> selected_objects;

      size_t term = t->size();
      for (size_t it = 0; it != term; ++it) {
        if (sel.passAllCuts(t->at(it))) {
          selected_objects.push_back(t->at(it));
        }
      }

      return selected_objects;
    }

  // -----------------------------------------------------------------------------
  template <class T>
    bool SelectorBase::passCut(T val, T min, T max, bool inclusive_boundaries)
    {
      if (min < 0 && max < 0) return true;
      if (min >= 0 && val < min) return false;
      if (max >= 0 && val > max) return false;

      if (!inclusive_boundaries) {
        if (min >= 0 && val == min) return false;
        if (max >= 0 && val == max) return false;
      }
      return true;
    }

  // -----------------------------------------------------------------------------
  template <class T1, class T2>
    void ObjectCleaning::overlapRemoveSecondList( const std::vector<T1*>& in_t1_list
                                                , const std::vector<T2*>& in_t2_list
                                                , std::vector<T2*>&       out_t2_list
                                                , double                  cone_size
                                                )
  {
    // prep output electron vector
    out_t2_list.clear();
    out_t2_list.reserve(in_t1_list.size());

    // vector to flag objects to keep
    std::vector<bool> keep_object(in_t2_list.size(), true);

    // Loop over all combinations of objects, checking for overlap
    size_t t1_term = in_t1_list.size();
    size_t t2_term = in_t2_list.size();
    for (size_t it_1 = 0; it_1 != t1_term; ++it_1) {
      const TLorentzVector* tlv1 = in_t1_list.at(it_1)->getTlv();

      for (size_t it_2 = 0; it_2 != t2_term; ++it_2) {
        const TLorentzVector* tlv2 = in_t2_list.at(it_2)->getTlv();

        // if overlap, flag for removal
        if (overlap(tlv1, tlv2, cone_size)) {
          keep_object.at(it_2) = false;
        }
      }
    }

    // add to output t2 objects flagged as "to keep"
    for (size_t it_2 = 0; it_2 != t2_term; ++it_2) {
      if (keep_object.at(it_2)) {
        out_t2_list.push_back(in_t2_list.at(it_2));
      }
    }
  }

  // -----------------------------------------------------------------------------
  template <class T1>
    void ObjectCleaning::overlapRemoveLowPt( const std::vector<T1*>& in_t1_list
                                           , std::vector<T1*>&       out_t1_list
                                           , double                  cone_size
                                           )
    {
      // prep output vector
      out_t1_list.clear();
      out_t1_list.reserve(in_t1_list.size());

      // vector to flag objects to keep
      std::vector<bool> keep_object(in_t1_list.size(), true);

      // Loop over all combinations of objects, checking for overlap
      size_t term = in_t1_list.size();
      for (size_t it_1 = 0; it_1 != term; ++it_1) {
        const TLorentzVector* tlv1 = in_t1_list.at(it_1)->getTlv();
        double pt1 = tlv1->Pt();

        for (size_t it_2 = 0; it_2 != it_1; ++it_2) {
          const TLorentzVector* tlv2 = in_t1_list.at(it_2)->getTlv();

          // if overlap, flag for removal
          if (overlap(tlv1, tlv2, cone_size)) {
            if (pt1 >= tlv2->Pt())
              keep_object.at(it_2) = false;
            else
              keep_object.at(it_1) = false;
          }
        }
      }

      // add to output objects flagged as "to keep"
      for (size_t it = 0; it != term; ++it) {
        if (keep_object.at(it)) {
          out_t1_list.push_back(in_t1_list.at(it));
        }
      }
    }

  // -----------------------------------------------------------------------------
  template <class T1, class T2>
    void ObjectCleaning::overlapRemoveBoth( const std::vector<T1*>& in_t1_list
                                          , const std::vector<T2*>& in_t2_list
                                          , std::vector<T1*>&       out_t1_list
                                          , std::vector<T2*>&       out_t2_list
                                          , double                  cone_size
                                          )
    {
      // prep output vectors
      out_t1_list.clear();
      out_t2_list.clear();

      out_t1_list.reserve(in_t1_list.size());
      out_t2_list.reserve(in_t2_list.size());

      // vector to flag objects to keep
      std::vector<bool> keep_t1(in_t1_list.size(), true);
      std::vector<bool> keep_t2(in_t2_list.size(), true);

      // Loop over all combinations of objects, checking for overlap
      size_t t1_term = in_t1_list.size();
      size_t t2_term = in_t2_list.size();
      for (size_t it_1 = 0; it_1 != t1_term; ++it_1) {
        const TLorentzVector* tlv1 = in_t1_list.at(it_1)->getTlv();

        for (size_t it_2 = 0; it_2 != t2_term; ++it_2) {
          const TLorentzVector* tlv2 = in_t2_list.at(it_2)->getTlv();

          // if overlap, flag for removal
          if (overlap(tlv1, tlv2, cone_size)) {
            keep_t1.at(it_1) = false;
            keep_t2.at(it_2) = false;
          }
        }
      }

      // add to output objects flagged as "to keep"
      for (size_t it_1 = 0; it_1 != t1_term; ++it_1) {
        if (keep_t1.at(it_1)) {
          out_t1_list.push_back(in_t1_list.at(it_1));
        }
      }
      for (size_t it_2 = 0; it_2 != t2_term; ++it_2) {
        if (keep_t2.at(it_2)) {
          out_t2_list.push_back(in_t2_list.at(it_2));
        }
      }
    }

  // -----------------------------------------------------------------------------
  template <class T1>
    void ObjectCleaning::overlapRemoveBoth( const std::vector<T1*>& in_t1_list
                                          , std::vector<T1*>&       out_t1_list
                                          , double                  cone_size
                                          )
    {
      // prep output vector
      out_t1_list.clear();
      out_t1_list.reserve(in_t1_list.size());

      // vector to flag objects to keep
      std::vector<bool> keep_object(in_t1_list.size(), true);

      // Loop over all combinations of objects, checking for overlap
      size_t term = in_t1_list.size();
      for (size_t it_1 = 0; it_1 != term; ++it_1) {
        const TLorentzVector* tlv1 = in_t1_list.at(it_1)->getTlv();

        for (size_t it_2 = 0; it_2 != it_1; ++it_2) {
          const TLorentzVector* tlv2 = in_t1_list.at(it_2)->getTlv();

          // if overlap, flag for removal
          if (overlap(tlv1, tlv2, cone_size)) {
            keep_object.at(it_1) = false;
            keep_object.at(it_2) = false;
          }
        }
      }

      // add to output flagged as "to keep"
      for (size_t it = 0; it != term; ++it) {
        if (keep_object.at(it)) {
          out_t1_list.push_back(in_t1_list.at(it));
        }
      }
    }
}

#endif
