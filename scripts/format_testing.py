#!/usr/bin/env python
# ==============================================================================
# = Script to do basic tests regarding formatting rules.  These include:
# =     1: No Tabs! (accetpable in certain file types)
# =     2: No Bad Spaces
# =     3: # characters/line <= 80
# =     4: Divider lines span full line (TODO)
# =     5: ...
# ==============================================================================


import sys
import os.path
import optparse
import time

# ------------------------------------------------------------------------------
def chompNewLines(line):
    line = line.rstrip('\n')
    return line

# ------------------------------------------------------------------------------
def findTabs(f_name, verbose = False):
    # Allow tabs in xml files
    if f_name[-4:] == '.xml': return
    # Allow tabs in Makefiles
    if 'Makefile' in f_name: return
    # Allow tabs in ChangeLog
    if 'ChangeLog' in f_name: return

    num_tab_lines = 0

    f = file(f_name, 'r')
    for i, l in enumerate(f):
        if not l.find('\t') == -1:
            num_tab_lines += 1
            if verbose:
                print 'Found tab! Line: %d' % (i+1)
                print l
                print ''

    if num_tab_lines > 0:
        print '\tFound %d lines with tabs' % num_tab_lines

# ------------------------------------------------------------------------------
def findBadSpaces(f_name, verbose = False):
    num_bad_space_lines = 0

    f = file(f_name, 'r')
    for i, l in enumerate(f):
        l = chompNewLines(l)
        if len(l) == 0: continue
        if (l[-1] == ' ' or l[-1] == '\t'):
            num_bad_space_lines += 1
            if verbose:
                print 'Found bad space! Line: %d' % (i+1)
                print l
                print ''

    if num_bad_space_lines > 0:
        print '\tFound %d lines with bad spaces' % num_bad_space_lines

# ------------------------------------------------------------------------------
def longLineException(f_name, line):
    if f_name[-4:] == '.xml':
        if 'File generated by SFrameHelpers.CreateDataInput' in line:
            return True
        if 'FileName' in line:
            return True
    if 'get_supporting_packages' in f_name:
        return True
    if 'root_core_packages' in f_name:
        return True


# ------------------------------------------------------------------------------
def findLongLines(f_name, verbose = False, max_len = 80):
    num_long_lines = 0

    f = file(f_name, 'r')
    for i, l in enumerate(f):
        # Skip files generated by configuration scripts since these might
        # include long file names, etc.
        if i == 0 and 'file generated' in l: return
        if i == 0 and 'File generated' in l: return

        if longLineException(f_name, l): continue

        l = chompNewLines(l)
        if len(l) > max_len:
            num_long_lines += 1
            if verbose:
                print 'Found long line! Line: %d (%d chars)' % ((i+1), len(l))
                print l
                print ''

    if num_long_lines > 0:
        print '\tFound %d long lines!' % num_long_lines

# ------------------------------------------------------------------------------
def main():
    dir_name = '.'
    if len(sys.argv) > 1:
        dir_name = sys.argv[1]
    print dir_name

    dirs_to_skip = []
    dirs_to_skip.append('D3PDObjects')
    dirs_to_skip.append('RootCore')
    dirs_to_skip.append('SFrame')
    dirs_to_skip.append('proof')
    dirs_to_skip.append('.svn')
    dirs_to_skip.append('obj')
    print dirs_to_skip

    #return

    for root, dirs, files in os.walk(dir_name):
        for d in dirs_to_skip:
            if d in dirs:
                dirs.remove(d)
        #if 'proof' in dirs:
        #    dirs.remove('proof')
        #if '.svn' in dirs:
        #    dirs.remove('.svn')
        #if 'obj' in dirs:
        #    dirs.remove('obj')

        for f in files:
            if '_Dict' in f: continue
            if f[0] == '.': continue
            if f[-4:] == '.swp': continue

            f_name = os.path.join(root,f)
            print '------------------------------------------------------------'
            print 'Checking file: %s' % f_name
            findTabs(f_name)
            findBadSpaces(f_name)
            findLongLines(f_name)
            print ''

# ==============================================================================
if __name__ == '__main__':
    main()
